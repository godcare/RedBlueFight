{"version":3,"sources":["Game18Control.js"],"names":["SoundManager","require","cc","Class","extends","Component","properties","SoundMGR","default","type","GameResultNode","Node","CountDownNode","PauseNode","redWheel","blueWheel","bBallParent","rBallParent","redCircle","blueCircle","GameStatus","maxRotateSpeed","speedReduce","speedUp","currentRSpeed","currentBSpeed","targetRSpeed","targetBSpeed","alphaReduce","start","startAnimation","scheduleOnce","active","i","find","toString","getComponent","RigidBody","gravityScale","onLoad","director","getPhysicsManager","enabled","update","dt","rotation","targetObj","dist","position","sub","mag","opacity","playScore","playOver","Global","GameData","CurrentWinner","onRotate","colorIndex","speed","Math","abs"],"mappings":"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","file":"Game18Control.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\Scripts\\Control\\Games\\Game18","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\nvar SoundManager = require(\"SoundManager\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        SoundMGR:\r\n        {\r\n            default: null,\r\n            type: SoundManager,\r\n        },\r\n        GameResultNode:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        CountDownNode:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        PauseNode:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redWheel:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blueWheel:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        bBallParent:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        rBallParent:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redCircle:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blueCircle:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        GameStatus:0,\r\n        maxRotateSpeed: 7,\r\n        speedReduce: 2,//速度衰减\r\n        speedUp: 2,//速度增加\r\n        currentRSpeed: 0,//当前红色转速\r\n        currentBSpeed: 0,//当前蓝色转速\r\n        targetRSpeed: 0,//红色目标转速\r\n        targetBSpeed: 0,//蓝色目标转速\r\n        alphaReduce: 100,//透明度衰减速度\r\n\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n\r\n\r\n    start() {\r\n        this.startAnimation();\r\n\r\n    },\r\n\r\n    startAnimation() {\r\n\r\n        this.scheduleOnce(function () {\r\n            this.CountDownNode.active = true;\r\n        }, 0.5)\r\n        this.scheduleOnce(function () {\r\n            this.GameStatus = 1;\r\n            this.PauseNode.active = true;\r\n            // var ra = cc.rotateBy(10, 2160);\r\n            // this.redWheel.runAction(ra);\r\n            for (var i = 0; i < 7; i++) {\r\n                cc.find(\"r\" + i.toString(), this.rBallParent).getComponent(cc.RigidBody).gravityScale = 1;\r\n                cc.find(\"r\" + i.toString(), this.bBallParent).getComponent(cc.RigidBody).gravityScale = -1;\r\n            }\r\n        }, 4.5);\r\n\r\n    },\r\n\r\n    onLoad() {\r\n        cc.director.getPhysicsManager().enabled = true;\r\n    },\r\n    update(dt) {\r\n        if (this.GameStatus == 1) {\r\n            //set red rotation\r\n            if (this.targetRSpeed == 0) {\r\n                if (this.currentRSpeed > 0) {\r\n                    this.currentRSpeed -= this.speedReduce * dt;\r\n                }\r\n                else {\r\n                    this.currentRSpeed += this.speedReduce * dt;\r\n                }\r\n            }\r\n            else if (this.targetRSpeed < this.currentRSpeed) {\r\n                this.currentRSpeed -= this.speedUp * dt;\r\n            }\r\n            else if (this.targetRSpeed > this.currentRSpeed) {\r\n                this.currentRSpeed += this.speedUp * dt;\r\n            }\r\n            this.redWheel.rotation += this.currentRSpeed;\r\n            //set blue rotation\r\n            if (this.targetBSpeed == 0) {\r\n                if (this.currentBSpeed > 0) {\r\n                    this.currentBSpeed -= this.speedReduce * dt;\r\n                }\r\n                else {\r\n                    this.currentBSpeed += this.speedReduce * dt;\r\n                }\r\n            }\r\n            else if (this.targetBSpeed < this.currentBSpeed) {\r\n                this.currentBSpeed -= this.speedUp * dt;\r\n            }\r\n            else if (this.targetBSpeed > this.currentBSpeed) {\r\n                this.currentBSpeed += this.speedUp * dt;\r\n            }\r\n            this.blueWheel.rotation += this.currentBSpeed;\r\n\r\n            //set balls\r\n            for (var i = 0; i < 7; i++) {\r\n                if (cc.find(\"r\" + i, this.rBallParent).active) {\r\n                    var targetObj = cc.find(\"r\" + i, this.rBallParent);                   \r\n                    // cc.log(\"target pos\" + targetObj.convertToWorldSpaceAR(targetObj.getPosition()));\r\n                    // cc.log(\"red circle pos\" + this.redCircle.convertToWorldSpaceAR(this.redCircle.getPosition()));\r\n                    // var dist = targetObj.convertToWorldSpaceAR(targetObj.getPosition()).sub(this.redCircle.convertToWorldSpaceAR(this.redCircle.getPosition())).mag();\r\n                    var dist = targetObj.position.sub(this.redCircle.position).mag();\r\n                    // cc.log(\"dist:\" + dist + \" name:\" + targetObj.name);   \r\n                    if (dist <= 40) {\r\n                        targetObj.opacity -= this.alphaReduce * dt;\r\n                        if (targetObj.opacity < 20) {\r\n                            targetObj.active = false;\r\n                            this.SoundMGR.playScore();\r\n                            if (i == 0)//red win\r\n                            {\r\n                                this.GameStatus = 2;\r\n                                this.SoundMGR.playOver();\r\n\r\n                                Global.GameData.CurrentWinner = 0;\r\n                                this.GameResultNode.active = true;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        targetObj.opacity = 255;\r\n                    }\r\n                }\r\n                if (cc.find(\"r\" + i, this.bBallParent).active) {\r\n                    var targetObj = cc.find(\"r\" + i, this.bBallParent);                   \r\n                    // cc.log(\"target pos\" + targetObj.convertToWorldSpaceAR(targetObj.getPosition()));\r\n                    // cc.log(\"red circle pos\" + this.redCircle.convertToWorldSpaceAR(this.redCircle.getPosition()));\r\n                    // var dist = targetObj.convertToWorldSpaceAR(targetObj.getPosition()).sub(this.redCircle.convertToWorldSpaceAR(this.redCircle.getPosition())).mag();\r\n                    var dist = targetObj.position.sub(this.blueCircle.position).mag();\r\n                    // cc.log(\"dist:\" + dist + \" name:\" + targetObj.name);   \r\n                    if (dist <= 40) {\r\n                        targetObj.opacity -= this.alphaReduce * dt;\r\n                        if (targetObj.opacity < 20) {\r\n                            targetObj.active = false;\r\n                            if (i == 0)//red win\r\n                            {\r\n                                this.GameStatus = 2;\r\n                                this.SoundMGR.playOver();\r\n\r\n                                Global.GameData.CurrentWinner = 1;\r\n                                this.GameResultNode.active = true;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        targetObj.opacity = 255;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n\r\n    onRotate(colorIndex, speed) {\r\n        if (colorIndex == 0)//red\r\n        {\r\n            // cc.log(speed);\r\n            if (Math.abs(speed) >= this.maxRotateSpeed) {\r\n                if (speed > 0) {\r\n                    this.targetRSpeed = -this.maxRotateSpeed;\r\n                }\r\n                else if (speed < 0) {\r\n                    this.targetRSpeed = this.maxRotateSpeed;\r\n                }\r\n                else {\r\n                    this.targetRSpeed = 0;\r\n                }\r\n            }\r\n            else {\r\n                this.targetRSpeed = -speed;\r\n            }\r\n        }\r\n        else {\r\n            if (Math.abs(speed) >= this.maxRotateSpeed) {\r\n                if (speed > 0) {\r\n                    this.targetBSpeed = -this.maxRotateSpeed;\r\n                }\r\n                else if (speed < 0) {\r\n                    this.targetBSpeed = this.maxRotateSpeed;\r\n                }\r\n                else {\r\n                    this.targetBSpeed = 0;\r\n                }\r\n            }\r\n            else {\r\n                this.targetBSpeed = -speed;\r\n            }\r\n        }\r\n    },\r\n});\r\n"]}