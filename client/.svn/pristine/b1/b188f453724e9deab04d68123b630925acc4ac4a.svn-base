"use strict";
cc._RF.push(module, 'c4b47d7JiBCKaduSdh3ICAJ', 'Game19Control');
// Scripts/Control/Games/Game19/Game19Control.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var SoundManager = require("SoundManager");
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        SoundMGR: {
            default: null,
            type: SoundManager
        },
        GameResultNode: {
            default: null,
            type: cc.Node
        },
        CountDownNode: {
            default: null,
            type: cc.Node
        },
        PauseNode: {
            default: null,
            type: cc.Node
        },

        bBallParent: {
            default: null,
            type: cc.Node
        },
        rBallParent: {
            default: null,
            type: cc.Node
        },
        redCorrect: {
            default: null,
            type: cc.Node
        },
        redSign: {
            default: null,
            type: cc.Node
        },
        blueCorrect: {
            default: null,
            type: cc.Node
        },
        blueSign: {
            default: null,
            type: cc.Node
        },
        redSprites: {
            default: [],
            type: [cc.SpriteFrame]
        },
        blueSprites: {
            default: [],
            type: [cc.SpriteFrame]
        },
        GameStatus: 0
    },

    // LIFE-CYCLE CALLBACKS:


    start: function start() {
        this.startAnimation();
    },
    startAnimation: function startAnimation() {
        this.setAllBalls();
        this.scheduleOnce(function () {
            this.CountDownNode.active = true;
        }, 0.5);
        this.scheduleOnce(function () {
            this.GameStatus = 1;
            this.PauseNode.active = true;
        }, 4.5);
    },
    setAllBalls: function setAllBalls() {
        for (var i = 0; i < 20; i++) {
            var tempRX = (Math.random() * 2 - 1) * 350;
            var tempRY = (Math.random() * 2 - 1) * 250;
            var tempRR = Math.random() * 360;
            var tempI = Math.floor(Math.random() * this.redSprites.length);
            cc.find("w" + i, this.rBallParent).getComponent(cc.Sprite).spriteFrame = this.redSprites[tempI];
            cc.find("w" + i, this.rBallParent).position = new cc.Vec2(tempRX, tempRY);
            cc.find("w" + i, this.rBallParent).rotation = tempRR;
            cc.find("w" + i, this.rBallParent).color = cc.Color.GRAY;

            var tempBX = (Math.random() * 2 - 1) * 350;
            var tempBY = (Math.random() * 2 - 1) * 250;
            var tempBR = Math.random() * 360;

            cc.find("w" + i, this.bBallParent).getComponent(cc.Sprite).spriteFrame = this.blueSprites[tempI];
            cc.find("w" + i, this.bBallParent).position = new cc.Vec2(tempBX, tempBY);
            cc.find("w" + i, this.bBallParent).rotation = tempBR;
            cc.find("w" + i, this.bBallParent).color = cc.Color.GRAY;
        }

        var tempRX = (Math.random() * 2 - 1) * 350;
        var tempRY = (Math.random() * 2 - 1) * 250;
        var tempRR = Math.random() * 360;
        if (tempRX < -100 && tempRY < 40) {
            tempRY += 100;
        }
        var tempI = Math.floor(Math.random() * this.redSprites.length);
        this.redCorrect.getComponent(cc.Sprite).spriteFrame = this.redSprites[tempI];
        this.redSign.getComponent(cc.Sprite).spriteFrame = this.redSprites[tempI];
        this.redCorrect.position = new cc.Vec2(tempRX, tempRY);
        this.redCorrect.rotation = tempRR;
        this.redCorrect.color = cc.Color.GRAY;

        var tempBX = (Math.random() * 2 - 1) * 350;
        var tempBY = (Math.random() * 2 - 1) * 250;
        var tempBR = Math.random() * 360;
        if (tempBX < -100 && tempBY < 40) {
            tempBY += 100;
        }

        this.blueCorrect.getComponent(cc.Sprite).spriteFrame = this.blueSprites[tempI];
        this.blueSign.getComponent(cc.Sprite).spriteFrame = this.blueSprites[tempI];
        this.blueCorrect.position = new cc.Vec2(tempBX, tempBY);
        this.blueCorrect.rotation = tempBR;
        this.blueCorrect.color = cc.Color.GRAY;
    },
    update: function update(dt) {
        if (this.GameStatus == 1) {
            if (this.redCorrect.position.sub(this.redSign.position).mag() <= 50) {
                // cc.log("red win");
                this.GameStatus = 2;
                this.SoundMGR.playOver();
                Global.GameData.CurrentWinner = 0;
                this.GameResultNode.active = true;
            } else if (this.blueCorrect.position.sub(this.blueSign.position).mag() <= 50) {
                // cc.log("red win");
                this.GameStatus = 2;
                this.SoundMGR.playOver();
                Global.GameData.CurrentWinner = 1;
                this.GameResultNode.active = true;
            }
        }
    },
    onBallTouchStart: function onBallTouchStart() {
        this.SoundMGR.playPop();
    },
    onRedTouch: function onRedTouch(redName) {
        // if (redName != "correct") {

        cc.find(redName, this.rBallParent).color = cc.Color.WHITE;

        // }
    },
    onRedRelease: function onRedRelease(redName) {
        // if (redName != "correct") {
        cc.find(redName, this.rBallParent).color = cc.Color.GRAY;
        // }
    },
    onBlueTouch: function onBlueTouch(blueName) {

        cc.find(blueName, this.bBallParent).color = cc.Color.WHITE;
        // }
    },
    onBlueRelease: function onBlueRelease(blueName) {
        // if (redName != "correct") {
        cc.find(blueName, this.bBallParent).color = cc.Color.GRAY;
        // }
    }
});

cc._RF.pop();