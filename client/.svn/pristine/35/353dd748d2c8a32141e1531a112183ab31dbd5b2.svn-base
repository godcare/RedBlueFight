"use strict";
cc._RF.push(module, '67ccev0mNhE87ntWoQNkG0q', 'Game12Control');
// Scripts/Control/Games/Game12/Game12Control.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var SoundManager = require("SoundManager");
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        SoundMGR: {
            default: null,
            type: SoundManager
        },
        GameResultNode: {
            default: null,
            type: cc.Node
        },
        CountDownNode: {
            default: null,
            type: cc.Node
        },
        PauseNode: {
            default: null,
            type: cc.Node
        },
        GameStatus: 0, //0未开始，1开始了，2结束了
        redCount: 0,
        blueCount: 0,
        panParent: {
            default: null,
            type: cc.Node
        },
        virusSprites: {
            default: [],
            type: [cc.SpriteFrame]
        },
        UnColoredList: [],
        TotalSeconds: 12,
        tmpTimer: 0,
        redProgress: {
            default: null,
            type: cc.ProgressBar
        },
        blueProgress: {
            default: null,
            type: cc.ProgressBar
        }
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {},

    start: function start() {
        // this.redScoreTotalNumber.setNumber(20);
        this.startAnimation();
    },
    update: function update(dt) {
        if (this.GameStatus == 1) {
            if (this.tmpTimer <= this.TotalSeconds) {
                this.tmpTimer += dt;
                this.redProgress.progress = (this.TotalSeconds - this.tmpTimer) / this.TotalSeconds;
                this.blueProgress.progress = (this.TotalSeconds - this.tmpTimer) / this.TotalSeconds;
            } else {
                this.GameStatus = 2;
                for (var i = 0; i < 13; i++) {
                    cc.find(i.toString(), this.panParent).getComponent(cc.Button).enabled = false;
                }
                if (this.redCount > this.blueCount) {
                    this.SoundMGR.playOver();
                    this.scheduleOnce(function () {
                        Global.GameData.CurrentWinner = 0;
                        this.GameResultNode.active = true;
                    }, 1);
                } else {
                    this.SoundMGR.playOver();
                    this.scheduleOnce(function () {
                        Global.GameData.CurrentWinner = 1;
                        this.GameResultNode.active = true;
                    }, 1);
                }
            }
        }
    },
    startAnimation: function startAnimation() {
        for (var i = 0; i < 13; i++) {
            cc.find(i.toString(), this.panParent).getComponent(cc.Button).enabled = false;
            this.UnColoredList.push(i.toString());
        }
        this.scheduleOnce(function () {
            this.CountDownNode.active = true;
        }, 0.5);
        this.scheduleOnce(function () {
            this.initViruses();
            this.GameStatus = 1;
            this.PauseNode.active = true;
            for (var i = 0; i < 13; i++) {
                cc.find(i.toString(), this.panParent).getComponent(cc.Button).enabled = true;
            }
        }, 4.5);
    },
    initViruses: function initViruses() {
        var tmpr = 0;
        for (var i = 0; i < 13; i++) {
            tmpr = Math.floor(Math.random() * this.UnColoredList.length);
            if (i < 6) {
                //red
                this.initColor(this.UnColoredList[tmpr], 0);
            } else if (i < 12) {
                //blue
                this.initColor(this.UnColoredList[tmpr], 1);
            } else if (i == 12) {
                //random
                var tmpc = Math.random();
                if (tmpc <= 0.5) {
                    this.initColor(this.UnColoredList[0], 0);
                } else {
                    this.initColor(this.UnColoredList[0], 1);
                }
            }
            this.UnColoredList.splice(tmpr, 1);
        }
    },
    onPanClick: function onPanClick(event, customEventData) {
        this.changeColor(customEventData);
    },
    initColor: function initColor(pIndex, cIndex) {
        if (cIndex == 0) //init red
            {
                cc.find(pIndex.toString() + "/virus", this.panParent).getComponent(cc.Sprite).spriteFrame = this.virusSprites[0];
                cc.find(pIndex.toString() + "/virus", this.panParent).rotation = 0;
                this.redCount += 1;
            } else if (cIndex == 1) //init blue
            {
                cc.find(pIndex.toString() + "/virus", this.panParent).getComponent(cc.Sprite).spriteFrame = this.virusSprites[1];
                cc.find(pIndex.toString() + "/virus", this.panParent).rotation = 180;
                this.blueCount += 1;
            }
    },
    changeColor: function changeColor(pIndex) {
        if (cc.find(pIndex.toString() + "/virus", this.panParent).getComponent(cc.Sprite).spriteFrame == this.virusSprites[0]) {
            cc.find(pIndex.toString() + "/virus", this.panParent).getComponent(cc.Sprite).spriteFrame = this.virusSprites[1];
            cc.find(pIndex.toString() + "/virus", this.panParent).rotation = 180;
            this.redCount -= 1;
            this.blueCount += 1;
            this.SoundMGR.playBlob();
        } else if (cc.find(pIndex.toString() + "/virus", this.panParent).getComponent(cc.Sprite).spriteFrame == this.virusSprites[1]) {
            cc.find(pIndex.toString() + "/virus", this.panParent).getComponent(cc.Sprite).spriteFrame = this.virusSprites[0];
            cc.find(pIndex.toString() + "/virus", this.panParent).rotation = 0;
            this.redCount += 1;
            this.blueCount -= 1;
            this.SoundMGR.playBlob();
        }
        if (this.redCount == 13) {
            for (var i = 0; i < 13; i++) {
                cc.find(i.toString(), this.panParent).getComponent(cc.Button).enabled = false;
            }

            this.SoundMGR.playOver();
            this.scheduleOnce(function () {
                Global.GameData.CurrentWinner = 0;
                this.GameResultNode.active = true;
            }, 1);
        } else if (this.blueCount == 13) {
            for (var i = 0; i < 13; i++) {
                cc.find(i.toString(), this.panParent).getComponent(cc.Button).enabled = false;
            }

            this.SoundMGR.playOver();
            this.scheduleOnce(function () {
                Global.GameData.CurrentWinner = 0;
                this.GameResultNode.active = true;
            }, 1);
        }
    }
});

cc._RF.pop();