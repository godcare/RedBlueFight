"use strict";
cc._RF.push(module, 'af81aHb4uNJpIgVrz2o33AL', 'Game1Control');
// Scripts/Control/Games/Game1/Game1Control.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var DragMove = require("Game1DragMove");
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        RedPlayer: {
            default: null,
            type: cc.Node
        },
        BluePlayer: {
            default: null,
            type: cc.Node
        },
        GameStatus: 0, //0未开始，1开始了，2结束了
        BallSpriteWhenRed: {
            default: null,
            type: cc.SpriteFrame
        },
        BallSpriteWhenBlue: {
            default: null,
            type: cc.SpriteFrame
        },

        GameResultNode: {
            default: null,
            type: cc.Node
        },
        CountDownNode: {
            default: null,
            type: cc.Node
        },
        PauseNode: {
            default: null,
            type: cc.Node
        },
        Ball: {
            default: null,
            type: cc.Node
        }
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {},
    onLoad: function onLoad() {
        cc.director.getPhysicsManager().enabled = true;
    },
    start: function start() {
        this.startAnimation();
    },
    startAnimation: function startAnimation() {
        this.scheduleOnce(function () {
            this.CountDownNode.active = true;
        }, 0.5);
        this.scheduleOnce(function () {
            this.RedPlayer.getComponent(DragMove).enabled = true;
            this.BluePlayer.getComponent(DragMove).enabled = true;
            this.GameStatus = 1;
            this.PauseNode.active = true;
            this.Ball.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(2, 500);
            this.Ball.getComponent(cc.RigidBody).angularVelocity = 5;
        }, 3.5);
    },
    onBallHit: function onBallHit(hitTarget) {

        cc.log("Game Control Detect Hit:" + hitTarget.toString());
        if (hitTarget == "RedPlayer") {
            this.Ball.getComponent(cc.Sprite).spriteFrame = this.BallSpriteWhenRed;
        } else if (hitTarget == "BluePlayer") {
            this.Ball.getComponent(cc.Sprite).spriteFrame = this.BallSpriteWhenBlue;
        } else if (hitTarget == "Top") {
            //Red win
            cc.log("Red Win");
            this.GameStatus = 2;
            this.RedPlayer.getComponent(DragMove).enabled = false;
            this.BluePlayer.getComponent(DragMove).enabled = false;
            this.scheduleOnce(function () {

                Global.GameData.CurrentWinner = 0;
                this.GameResultNode.active = true;
            }, 0.5);
        } else if (hitTarget == "Bottom") {
            //Blue win
            cc.log("Blue Win");
            this.GameStatus = 2;
            this.RedPlayer.getComponent(DragMove).enabled = false;
            this.BluePlayer.getComponent(DragMove).enabled = false;
            this.scheduleOnce(function () {

                Global.GameData.CurrentWinner = 1;
                this.GameResultNode.active = true;
            }, 0.5);
        }
    }

    // update (dt) {},

});

cc._RF.pop();