// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var SoundManager = require("SoundManager");
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        SoundMGR:
        {
            default: null,
            type: SoundManager,
        },
        GameResultNode:
        {
            default: null,
            type: cc.Node,
        },
        CountDownNode:
        {
            default: null,
            type: cc.Node,
        },
        PauseNode:
        {
            default: null,
            type: cc.Node,
        },
        GameStatus: 0,//0未开始，1开始了，2结束了
        redBall:
        {
            default: null,
            type: cc.Node,
        },
        blueBall:
        {
            default: null,
            type: cc.Node,
        },
        isJumpStart: false,
    },

    // LIFE-CYCLE CALLBACKS:

    onLoad() {
        cc.director.getPhysicsManager().enabled = true;
    },

    start() {
        // this.redScoreTotalNumber.setNumber(20);
        this.startAnimation();

    },
    startAnimation() {

        this.scheduleOnce(function () {
            this.CountDownNode.active = true;
        }, 0.5)
        this.scheduleOnce(function () {
            this.GameStatus = 1;
            this.PauseNode.active = true;
        }, 4.5);

    },

    OnTouchPanelStart(touchName) {
        if (this.GameStatus == 1) {
            if (this.isJumpStart) {
                if (touchName == "redTouch") {
                    this.jumpBall(0);
                }
                else if (touchName == "blueTouch") {
                    this.jumpBall(1);
                }
            }
            else {
                cc.log(touchName);
                this.isJumpStart = true;
                this.redBall.getComponent(cc.RigidBody).gravityScale = 1;
                this.blueBall.getComponent(cc.RigidBody).gravityScale = -1;
                this.redBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(300, 0);
                this.blueBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(-300, 0);
                this.jumpBall(0);
                this.jumpBall(1);
            }
        }


    },

    OnBallHit(ballName, hitName) {
        if (ballName == "redBall") {
            if (hitName == "Left") {
                this.redBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(300, this.redBall.getComponent(cc.RigidBody).linearVelocity.y);
            }
            else if (hitName == "Right") {
                this.redBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(-300, this.redBall.getComponent(cc.RigidBody).linearVelocity.y);
            }
            else if (hitName == "Danger") {
                this.GameStatus = 2;
                this.redBall.getComponent(cc.RigidBody).gravityScale = 0;
                this.blueBall.getComponent(cc.RigidBody).gravityScale = 0;
                this.redBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(0, 0);
                this.blueBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(0, 0);
                this.SoundMGR.playOver();
                this.schedule(function () {
                    this.redBall.active = !this.redBall.active;
                }, 0.3);
                this.scheduleOnce(function () {
                    Global.GameData.CurrentWinner = 1;
                    this.GameResultNode.active = true;
                }, 1.5);
            }
        }
        else if (ballName == "blueBall") {
            if (hitName == "Left") {
                this.blueBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(300, this.blueBall.getComponent(cc.RigidBody).linearVelocity.y);
            }
            else if (hitName == "Right") {
                this.blueBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(-300, this.blueBall.getComponent(cc.RigidBody).linearVelocity.y);
            }
            else if (hitName == "Danger") {
                this.GameStatus = 2;
                this.redBall.getComponent(cc.RigidBody).gravityScale = 0;
                this.blueBall.getComponent(cc.RigidBody).gravityScale = 0;
                this.redBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(0, 0);
                this.blueBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(0, 0);
                this.SoundMGR.playOver();
                this.schedule(function () {
                    this.blueBall.active = !this.blueBall.active;
                }, 0.3);
                this.scheduleOnce(function () {
                    Global.GameData.CurrentWinner = 0;
                    this.GameResultNode.active = true;
                }, 1.5);
            }
        }
    },

    jumpBall(ballIndex) {
        if (ballIndex == 0) {
            this.redBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(this.redBall.getComponent(cc.RigidBody).linearVelocity.x, 300);
        }
        else if (ballIndex == 1) {
            this.blueBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(this.blueBall.getComponent(cc.RigidBody).linearVelocity.x, -300);
        }
    }
    // update (dt) {},
});
