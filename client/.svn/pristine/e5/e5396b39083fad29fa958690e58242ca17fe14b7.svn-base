(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/Scripts/Control/Games/Common/CountDownControl.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, '3e1dadfjJZK2YryxlTtRkwk', 'CountDownControl', __filename);
// Scripts/Control/Games/CountDownControl.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html

cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        RedNumber: {
            default: null,
            type: cc.Node
        },
        BlueNumber: {
            default: null,
            type: cc.Node
        },
        RedSprites: {
            default: [],
            type: [cc.SpriteFrame]
        },
        BlueSprites: {
            default: [],
            type: [cc.SpriteFrame]
        },
        nIndex: 0
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {},

    start: function start() {
        this.startAnimation();
    },
    startAnimation: function startAnimation() {
        this.RedNumber.setScale(4, 1);
        this.BlueNumber.setScale(4, 1);
        var ra = cc.scaleTo(0.3, 1, 1);
        var ba = cc.scaleTo(0.3, 1, 1);
        this.RedNumber.runAction(ra);
        this.BlueNumber.runAction(ba);

        this.scheduleOnce(function () {
            this.nIndex++;
            this.RedNumber.getComponent(cc.Sprite).spriteFrame = this.RedSprites[this.nIndex];
            this.BlueNumber.getComponent(cc.Sprite).spriteFrame = this.BlueSprites[this.nIndex];
            this.RedNumber.setScale(4, 1);
            this.BlueNumber.setScale(4, 1);
            var ra1 = cc.scaleTo(0.3, 1, 1);
            var ba1 = cc.scaleTo(0.3, 1, 1);
            this.RedNumber.runAction(ra1);
            this.BlueNumber.runAction(ba1);
        }, 1);

        this.scheduleOnce(function () {
            this.nIndex++;
            this.RedNumber.getComponent(cc.Sprite).spriteFrame = this.RedSprites[this.nIndex];
            this.BlueNumber.getComponent(cc.Sprite).spriteFrame = this.BlueSprites[this.nIndex];
            this.RedNumber.setScale(4, 1);
            this.BlueNumber.setScale(4, 1);
            var ra1 = cc.scaleTo(0.3, 1, 1);
            var ba1 = cc.scaleTo(0.3, 1, 1);
            this.RedNumber.runAction(ra1);
            this.BlueNumber.runAction(ba1);
        }, 2);

        this.scheduleOnce(function () {
            this.nIndex++;
            this.RedNumber.getComponent(cc.Sprite).spriteFrame = this.RedSprites[this.nIndex];
            this.BlueNumber.getComponent(cc.Sprite).spriteFrame = this.BlueSprites[this.nIndex];
            this.RedNumber.setScale(4, 1);
            this.BlueNumber.setScale(4, 1);
            var ra1 = cc.scaleTo(0.3, 1, 1);
            var ba1 = cc.scaleTo(0.3, 1, 1);
            this.RedNumber.runAction(ra1);
            this.BlueNumber.runAction(ba1);
        }, 3);

        this.scheduleOnce(function () {
            var ra1 = cc.scaleTo(0.3, 0, 0);
            var ba1 = cc.scaleTo(0.3, 0, 0);
            this.RedNumber.runAction(ra1);
            this.BlueNumber.runAction(ba1);
        }, 3.5);
        this.scheduleOnce(function () {
            this.node.active = false;
        }, 4);
    }
    // update (dt) {},

});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=CountDownControl.js.map
        