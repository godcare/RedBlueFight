{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Scripts\\Control\\Loading/assets\\Scripts\\Control\\Loading\\LoadingControl.js"],"names":["GameData","require","cc","Class","extends","Component","properties","loadingProgress","default","type","ProgressBar","targetBall","Node","onLoad","director","getPhysicsManager","enabled","log","Global","start","InitData","scheduleOnce","name","getComponent","RigidBody","linearVelocity","Vec2"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,yBACA;AACIC,qBAAS,IADb;AAEIC,kBAAMP,GAAGQ;AAFb,SAjBQ;AAqBRC,oBACA;AACIH,qBAAS,IADb;AAEIC,kBAAMP,GAAGU;AAFb;AAtBQ,KAHP;;AA+BL;;AAEA;AACAC,YAAQ,kBAAY;AAChBX,WAAGY,QAAH,CAAYC,iBAAZ,GAAgCC,OAAhC,GAA0C,IAA1C;AACAd,WAAGe,GAAH,CAAO,iBAAP;AACAC,eAAOlB,QAAP,GAAkB,IAAIA,QAAJ,EAAlB;AACH,KAtCI;AAuCLmB,SAvCK,mBAuCG;AACJ,aAAKC,QAAL;AACH,KAzCI;;;AA2CLA,cAAU,oBAAY;AAClB,aAAKC,YAAL,CAAkB,YAAY;AAC1BnB,eAAGe,GAAH,CAAO,WAAW,KAAKN,UAAL,CAAgBW,IAAlC;AACA,iBAAKX,UAAL,CAAgBY,YAAhB,CAA6BrB,GAAGsB,SAAhC,EAA2CC,cAA3C,GAA4D,IAAIvB,GAAGwB,IAAP,CAAY,CAAC,IAAb,EAAmB,IAAnB,CAA5D;AACH,SAHD,EAGG,GAHH;AAIH;;AAED;AAlDK,CAAT","file":"LoadingControl.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Scripts\\Control\\Loading","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\nvar GameData = require(\"GameData\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        loadingProgress:\r\n        {\r\n            default: null,\r\n            type: cc.ProgressBar\r\n        },\r\n        targetBall:\r\n        {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    onLoad: function () {\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        cc.log(\"Create GameData\");\r\n        Global.GameData = new GameData();\r\n    },\r\n    start() {\r\n        this.InitData();\r\n    },\r\n\r\n    InitData: function () {\r\n        this.scheduleOnce(function () {\r\n            cc.log(\"called\" + this.targetBall.name);\r\n            this.targetBall.getComponent(cc.RigidBody).linearVelocity = new cc.Vec2(-2000, 1000);\r\n        }, 1.5);\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}