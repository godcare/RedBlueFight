(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/Scripts/Control/Games/Game11/Game11Control.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, '32bb4wlczhHoK8LBhCi/vny', 'Game11Control', __filename);
// Scripts/Control/Games/Game11/Game11Control.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
var SoundManager = require("SoundManager");
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        SoundMGR: {
            default: null,
            type: SoundManager
        },
        GameResultNode: {
            default: null,
            type: cc.Node
        },
        CountDownNode: {
            default: null,
            type: cc.Node
        },
        PauseNode: {
            default: null,
            type: cc.Node
        },
        redRope: {
            default: null,
            type: cc.Node
        },
        blueRope: {
            default: null,
            type: cc.Node
        },
        GameStatus: 0, //0未开始，1开始了，2结束了
        rSpeed: 0,
        bSpeed: 0,
        rLength: 275,
        bLength: 275,
        maxLength: 275,
        minLength: 60,
        minSpeed: 50,
        lengthChangeSpeed: 100,
        redEar: {
            default: null,
            type: cc.Node
        },
        blueEar: {
            default: null,
            type: cc.Node
        },
        rflag: -1,
        bflag: -1
    },

    // LIFE-CYCLE CALLBACKS:

    onLoad: function onLoad() {
        cc.director.getPhysicsManager().enabled = true;
    },
    start: function start() {
        this.startAnimation();
        // cc.log(this.Coin.scaleX);
    },
    startAnimation: function startAnimation() {

        this.scheduleOnce(function () {
            this.CountDownNode.active = true;
        }, 0.5);
        this.scheduleOnce(function () {
            this.GameStatus = 1;
            this.PauseNode.active = true;
            // this.spawnBall(0);
            // this.spawnBall(1);
        }, 4.5);
    },
    update: function update(dt) {
        if (this.GameStatus == 1) {

            this.rLength += dt * this.lengthChangeSpeed * this.rflag;
            if (this.rLength < this.minLength) {
                this.rLength = this.minLength;
                this.rflag = 1;
            } else if (this.rLength > this.maxLength) {
                this.rLength = this.maxLength;
                this.rflag = -1;
            }
            this.redRope.width = this.rLength;
            var rate = this.maxLength / this.rLength;
            rate *= rate;
            if (rate > 20) {
                rate = 20;
            } else if (rate < 1) {
                rate = 1;
            }
            this.rSpeed = this.minSpeed * rate;
            cc.log(this.rSpeed);
            this.redRope.rotation += dt * this.rSpeed;

            this.redEar.x = this.rLength + 35;
        }
    }
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=Game11Control.js.map
        